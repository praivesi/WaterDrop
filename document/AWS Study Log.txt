[2020.10.04 공부 내용]
1. 회원가입 해야 AWS 사용 가능함
2. Region 안에는 AZ(Availability Zone) 이 여러 개 있고, 이 AZ들은 전용선으로 연결되어 있어서 다른 건물이라 할지라도 한 건물에 있는것처럼 속도가 빠르다.
3. EC2(Elastic Compute 2) : 아마존의 대표적인 서비스
	=> 독립된 컴퓨터 한대를 통째로 임대해줌
4. 인스턴스
	-> 온디맨드 인스턴스 (원할 때 키고 끌 수 있음)
	-> 예약 인스턴스 (일정 기간 동안 AWS 사용하는 대신 할인권을 받음, 온디맨드 인스턴스처럼 원할 떄 키고 끌 수 있지만 3년치 계약하고 1년치만 쓰면 아무래도 손해가 날 확률이 커짐)
	-> 스팟 인스턴스(AWS에 노는 인스턴스가 많을 땐 가격이 낮아지고, 노는 인스턴스가 적으면 가격이 높음.. 주가처럼 인스턴스 가격이 가변적)
5. Security Group
	-> SSH 는 내 컴퓨터만 접속 허용을 해도 되지만, 웹사이트의 경우 다른 PC도 접근해야 하기 때문에 'Anywhere' 로 해야함
	-> Window 인스턴스의 경우 SSH 말고 RDP 로 원격 제어를 설정함
6. Key Pair: AWS 인스턴스에 접근하기 위해 필요한 비밀번호
	-> 이거 잃어버리면 다시 접속하기가 무척 어려움.. 알아서 Portable Device에 잘 보관해야함

[2020.10.05 공부 내용]
1. WinSCP: 윈도우에서 리눅스 서버로 파일 전송을 쉽게 해주는 프로그램 // 이 프로그램을 통해 Windows 에서 작업한 파일들을 AWS의 Ubuntu 인스턴스로 옮김.
2. mongodb, nodejs, yarn 은 AWS의 Ubuntu 인스턴스에서 새로 설치해줌. npm과 yarn이 사용하는 node 버전이 달라서 좀 헤맸는데 구글링으로 해결함.. 결국 기존의 node 패키지를 지우고 새로 설치한 후 업그레이드함.
3. WaterDrop은 React로 프론트엔드를 만들었는데 이 앱을 정상적으로 작동시키기 위해선 NginX를 사용해야 할듯.. 내일은 NginX를 AWS 위에 올린 후 React 앱을 구동시켜보자.

[2020.10.06 공부 내용]
1. React 로 개발한 프론트엔드를 NginX를 이용해서 AWS Ubuntu에 업로드함.
	-> apt-get 을 이용해 nginx를 설치하고 nginx의 설정 정보에 내가 빌드한 React 앱을 바인딩시킴.
	-> 이전에 AWS Ubuntu에 apache를 웹서버 테스트용으로 설치했었는데 이것때문에 start nginx 명령어가 실행되지 않았다. apache 웹 서버를 stop 시킨 후 nginx를 start하니 잘 실행된다.
	-> AWS Ubuntu의 IP 에 80 포트로 접속하면 드디어...!! React 앱의 첫 화면이 나온다...!!